#!/usr/bin/env python3
"""Simplify the list of contributors of markdownlint, 2/2"""

# name:    simpler_list.py
# author:  nbehrnd@yahoo.com
# license: nil, pro uso interno
# date:    [2022-12-12 Mon]
# edit:

# Why:
# Preparation of `markdownlint` with `gem2deb` generates a file `copyright`. The
# list of the contributors extracted by bash script `git_report.sh` already is
# chronological sort, and shorter than the initial report by git.  Note, authors
# with commits in more than one year still appear multiple times -- but I think
# to report their first year of contribution is sufficient here.
#
# How:
# Copy-paste this script into a local git repository of `markdownlint`.  Run
# script `git_report.sh` (see there) for an intermediate list.  Then call
#
# ```shell
# python3 ./simpler_list.py [listing.txt]
# ```
#
# to process intermediate listing file written by `git_report.sh`.  Assuming a
# discern of the contributors by their email address (last entry per line) fits
# the needs, multiple entries of authors are then absent in the newly written
# file `shortlist.txt`; this is ready for use for file `copyright`.
#
# Written for and tested with Python 3.10.9 as provided by Debian 12/bookworm --
# only the standard library is used.

import argparse
import sys


def collect_parameters():
    """initialize where to work"""
    parser = argparse.ArgumentParser(
        description="Simplify the list of contributors of markdownlint")
    parser.add_argument(
        "file", help="Input file (which is generated by git_report.sh)")
    args = parser.parse_args()

    return args.file


def reader():
    """read the intermediate listing"""
    contact_register = []
    output_list = []

    input_file = collect_parameters()
    try:
        with open(input_file, mode="r", encoding="utf-8") as source:
            for line in source:
                email = ""
                email = str(line).strip().split()[-1]
                if email not in contact_register:
                    contact_register.append(email)
                    output_list.append(str(line).strip())
    except IOError:
        print(f"File '{input_file}' is not accessible.  Exit.")
        sys.exit()

    return output_list


def writer():
    """(over)write a new permanent record"""
    output_file = "shortlist.txt"
    output_list = reader()

    try:
        with open(output_file, mode="w", encoding="utf-8") as newfile:
            for entry in output_list:
                newfile.write(f"{entry}\n")
    except IOError:
        print(f"File {output_file} can not be written.  Exit.")
        sys.exit()


def main():
    """join the functionalities"""
    collect_parameters()
    writer()


if __name__ == "__main__":
    main()
